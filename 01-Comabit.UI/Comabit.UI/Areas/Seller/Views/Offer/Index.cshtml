@model IndexViewModel

@using Comabit.UI.Areas.Seller.Models.Match;
@using Comabit.BL.Helpers.Enumerations;
@using Comabit.DL.Data.Match;

@{
    ViewBag.Title = "SalesManager";
}

<h1 class="h1 mb-1">Angebotsabgaben</h1>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Start</a></li>
        <li class="breadcrumb-item active">Angebotsmanager | Matches für die ein Angebot abgegeben wurde</li>
    </ol>
</nav>

<div class="tab">
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link active" href="#" data-bs-toggle="tab" data-bs-target="#All">Übersicht</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#" data-bs-toggle="tab" data-bs-target="#Pending">Offen</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#" data-bs-toggle="tab" data-bs-target="#Ordered">Beauftragt</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#" data-bs-toggle="tab" data-bs-target="#Revoked">Abgelehnt</a>
        </li>
    </ul>
    <div class="tab-content" id="myTabContent">
        <div class="tab-pane fade show active" id="All" role="tabpanel">
            <div class="card">
                <div class="card-body">
                    @(await Html.PartialAsync("_Offers", Model.Matches))
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="Pending" role="tabpanel">
            <div class="card">
                <div class="card-body">
                    @(await Html.PartialAsync("_Offers", Model.Matches.Where(m => m.CurrentOffer != null && (m.CurrentOffer.State == OfferState.pending || m.CurrentOffer.State == OfferState.renew)).ToList()))
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="Ordered" role="tabpanel">
            <div class="card">
                <div class="card-body">
                    @(await Html.PartialAsync("_Offers", Model.Matches.Where(m => m.CurrentOffer != null && m.CurrentOffer.State == OfferState.ordered).ToList()))
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="Revoked" role="tabpanel">
            <div class="card">
                <div class="card-body">
                    @(await Html.PartialAsync("_Offers", Model.Matches.Where(m => m.CurrentOffer != null && m.CurrentOffer.State == OfferState.revoked).ToList()))
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="ModalSalesmanager" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">

        </div>
    </div>
</div>

@(await Html.PartialAsync("_ModalChat"))

@section Scripts {
    <script>
        $('body').on('click', '.detail', function () {
            var btn = $(this);
            var url = "@Url.Action("Detail", "Offer")/" + btn.data("id");

            submit(url);

            return false;
        });


        var submit = function (url) {
            $.ajax({
                url: url,
                type: 'GET',
                beforeSend: function () {
                    @*$('#ModalSalesmanager .modal-content').html("<div class='spinner-border text-dark me-2' role='status'><span class='visually-hidden'>Loading...</span></div>");*@
                },
                success: function (result) {
                    $('#ModalSalesmanager').modal("show");
                    $('#ModalSalesmanager .modal-content').html(result.html);
                },
                error: function (result) {
                    $('#ModalSalesmanager .modal-content').html('Es ist ein Fehler aufgetreten.');
                }
            });
        };

        $('body').on('click', '.btn-messages', function () {
            var match = $(this);
            currentMatch = match;

            $.ajax({
                url: '@Url.Action("AllMessagesForMatch", "Message", new { Area = "" })',
                type: 'GET',
                data: {
                    matchId: match.data('id'),
                },
                dataType: 'json',
                beforeSend: function () {
                    $('#chat-messages').empty().html('Lade Nachrichten...');
                },
                success: function (result) {
                    $('#chat-messages').empty();

                    $.each(result, function (idx, message) {
                        $('#chat-messages').append(getChatMessageHtml(message));
                    });

                    $('#ModalChat .detail').data('id', match.data('id'));
                    $('#ModalChat #add-message-form').data('id', match.data('id'));
                    $('#ModalChat #add-message-form').data('receiverid', match.data('receiverid'));

                    $('#ModalChat .modal-title').text(match.data('buyername') + " / Anfrage: " + match.data('inquirynumber') + " / " + match.data('portfolio'));

                    $('#ModalChat').modal("show");
                },
                error: function (request, error) {

                }
            });

            return false;
        });

        $('body').on('submit', '#add-message-form', function () {
            var matchId = $(this).data('id');
            var messageText = stripHtml($('#message-input').val());
            var receiverId = $(this).data('receiverid');

            if ($('#message-input').val() === '') return false;

            $.ajax({
                url: '@Url.Action("AddMessage", "Message", new { Area = "" })',
                type: 'POST',
                data: {
                    matchId: matchId,
                    text: messageText,
                },
                dataType: 'json',
                success: function (newMessage) {
                    var chatMessages = $('#chat-messages');

                    chatMessages.append(getChatMessageHtml(newMessage));

                    chatMessages.animate({ scrollTop: chatMessages.prop("scrollHeight") }, 500);

                    $('#message-input').val("").focus();

                    messageHubConnection.send("SendMatchMessage", receiverId, matchId, newMessage.id);
                },
                error: function (request, error) {

                }
            });

            return false;
        });

        getMessage = function (matchId, messageId) {
            $.ajax({
                url: '@Url.Action("GetMatchChatForSeller", "Message", new { Area = "" })',
                type: 'GET',
                data: {
                    matchId: matchId,
                    messageId: messageId
                },
                dataType: 'json',
                success: function (matchChat) {
                    $('#chat-messages').append(getChatMessageHtml(matchChat.newestMessage));

                    var chatMessages = $('#chat-messages');
                    var firstUnreadMessage = $('.chat-message.unread').first();

                    if (firstUnreadMessage.length == 1) {
                        chatMessages.animate({ scrollTop: chatMessages.scrollTop() + firstUnreadMessage.position().top - 100 }, 500);
                    } else {
                        chatMessages.animate({ scrollTop: chatMessages.prop("scrollHeight") }, 500);
                    }

                    $('.unread-badge', currentMatch).addClass('d-none');
                },
                error: function (request, error) {

                }
            });
        }

        $(document).on("DOMContentLoaded", function () {
            messageHubConnection.on('ReceiveMatchMessage', function (matchId, messageId) {
                var currentMatchId = currentMatch.data("id");

                if (currentMatchId == matchId) {
                    getMessage(matchId, messageId);
                }
                //else {
                //    updateMatchChat(matchId, messageId);
                //}
            });
        });
    </script>
}
