// <auto-generated />
using System;
using Comabit.DL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Comabit.DL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211014055610_addupdatefieldsonbuyerprojectinquiry")]
    partial class addupdatefieldsonbuyerprojectinquiry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ApplicationPermissionApplicationRole", b =>
                {
                    b.Property<int>("PermissionsApplicationPermissionId")
                        .HasColumnType("integer");

                    b.Property<string>("RolesId")
                        .HasColumnType("text");

                    b.HasKey("PermissionsApplicationPermissionId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("ApplicationPermissionApplicationRole");
                });

            modelBuilder.Entity("BuyerProjectInquiryPortfolioCategory", b =>
                {
                    b.Property<Guid>("BuyerProjectInquireId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PortfolioCategoriesId")
                        .HasColumnType("uuid");

                    b.HasKey("BuyerProjectInquireId", "PortfolioCategoriesId");

                    b.HasIndex("PortfolioCategoriesId");

                    b.ToTable("BuyerProjectInquiryPortfolioCategory");
                });

            modelBuilder.Entity("BuyerProjectInquiryPortfolioSubCategory", b =>
                {
                    b.Property<Guid>("BuyerProjectInquireId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PortfolioSubCategoriesId")
                        .HasColumnType("uuid");

                    b.HasKey("BuyerProjectInquireId", "PortfolioSubCategoriesId");

                    b.HasIndex("PortfolioSubCategoriesId");

                    b.ToTable("BuyerProjectInquiryPortfolioSubCategory");
                });

            modelBuilder.Entity("Comabit.DL.ApplicationPermission", b =>
                {
                    b.Property<int>("ApplicationPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("ApplicationPermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Comabit.DL.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Comabit.DL.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ClaimsSecurityStamp")
                        .HasColumnType("text");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Lastname")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("PasswordChangeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PasswordSentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Comabit.DL.Data.Company.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessTaxId")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MainUserId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UstId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Company");
                });

            modelBuilder.Entity("Comabit.DL.Data.File.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("MimeType")
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Files");

                    b.HasDiscriminator<string>("Discriminator").HasValue("File");
                });

            modelBuilder.Entity("Comabit.DL.Data.File.FileData", b =>
                {
                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Data")
                        .HasColumnType("bytea");

                    b.HasKey("FileId");

                    b.ToTable("FileDatas");
                });

            modelBuilder.Entity("Comabit.DL.Data.Geo.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AgsCode")
                        .HasColumnType("text");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uuid");

                    b.Property<int>("GeoPositionAccuracy")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Population")
                        .HasColumnType("integer");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Comabit.DL.Data.Geo.Community", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AgsCode")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("Comabit.DL.Data.Geo.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AgsCode")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Comabit.DL.Data.Geo.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AgsCode")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Comabit.DL.Data.Inquiry.BuyerProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuyerCompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("ContactClerk")
                        .HasColumnType("text");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuyerCompanyId");

                    b.ToTable("BuyerProject");
                });

            modelBuilder.Entity("Comabit.DL.Data.Inquiry.BuyerProjectInquiry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddidtionalTags")
                        .HasColumnType("text");

                    b.Property<Guid>("BuyerProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeadlineInfo")
                        .HasColumnType("text");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeliveryInfo")
                        .HasColumnType("text");

                    b.Property<string>("DeliveryPlace")
                        .HasColumnType("text");

                    b.Property<int>("InquiryNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Purepose")
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("InquiryNumber");

                    b.HasIndex("BuyerProjectId");

                    b.ToTable("BuyerProjectInquiry");
                });

            modelBuilder.Entity("Comabit.DL.Data.Match.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InquiryId")
                        .HasColumnType("uuid");

                    b.Property<int?>("RevokeReason")
                        .HasColumnType("integer");

                    b.Property<string>("RevokeReasonText")
                        .HasColumnType("text");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SellerCompanyId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SellerCompanyId");

                    b.HasIndex("InquiryId", "SellerCompanyId")
                        .IsUnique();

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Comabit.DL.Data.Match.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FromUser")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<Guid>("ToUser")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Comabit.DL.Data.Match.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.HasIndex("MatchId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Comabit.DL.Data.Portfolio.AdditionalPortfolioCategoryTags", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PortfolioCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SellerCompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SellerCompanyId");

                    b.HasIndex("PortfolioCategoryId", "SellerCompanyId")
                        .IsUnique();

                    b.ToTable("AdditionalPortfolioCategoryTags");
                });

            modelBuilder.Entity("Comabit.DL.Data.Portfolio.PortfolioArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PortfolioAreas");
                });

            modelBuilder.Entity("Comabit.DL.Data.Portfolio.PortfolioCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("PortfolioAreaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioAreaId");

                    b.ToTable("PortfolioCategories");
                });

            modelBuilder.Entity("Comabit.DL.Data.Portfolio.PortfolioSubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("PortfolioCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioCategoryId");

                    b.ToTable("PortfolioSubCategories");
                });

            modelBuilder.Entity("Comabit.DL.Data.Templates.MailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("TemplateName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MailTemplates");
                });

            modelBuilder.Entity("CommunitySellerCompany", b =>
                {
                    b.Property<Guid>("CommunitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SellerCompaniesId")
                        .HasColumnType("uuid");

                    b.HasKey("CommunitiesId", "SellerCompaniesId");

                    b.HasIndex("SellerCompaniesId");

                    b.ToTable("CommunitySellerCompany");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PortfolioCategorySellerCompany", b =>
                {
                    b.Property<Guid>("PortfolioCategoriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SellerCompaniesId")
                        .HasColumnType("uuid");

                    b.HasKey("PortfolioCategoriesId", "SellerCompaniesId");

                    b.HasIndex("SellerCompaniesId");

                    b.ToTable("PortfolioCategorySellerCompany");
                });

            modelBuilder.Entity("PortfolioSubCategorySellerCompany", b =>
                {
                    b.Property<Guid>("PortfolioSubCategoriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SellerCompaniesId")
                        .HasColumnType("uuid");

                    b.HasKey("PortfolioSubCategoriesId", "SellerCompaniesId");

                    b.HasIndex("SellerCompaniesId");

                    b.ToTable("PortfolioSubCategorySellerCompany");
                });

            modelBuilder.Entity("Comabit.DL.Data.Company.BuyerCompany", b =>
                {
                    b.HasBaseType("Comabit.DL.Data.Company.Company");

                    b.HasDiscriminator().HasValue("BuyerCompany");
                });

            modelBuilder.Entity("Comabit.DL.Data.Company.SellerCompany", b =>
                {
                    b.HasBaseType("Comabit.DL.Data.Company.Company");

                    b.HasDiscriminator().HasValue("SellerCompany");
                });

            modelBuilder.Entity("Comabit.DL.Data.File.InquiryFile", b =>
                {
                    b.HasBaseType("Comabit.DL.Data.File.File");

                    b.Property<Guid>("BuyerProjectInquiryId")
                        .HasColumnType("uuid");

                    b.HasIndex("BuyerProjectInquiryId");

                    b.HasDiscriminator().HasValue("InquiryFile");
                });

            modelBuilder.Entity("Comabit.DL.Data.File.OfferFile", b =>
                {
                    b.HasBaseType("Comabit.DL.Data.File.File");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid");

                    b.HasDiscriminator().HasValue("OfferFile");
                });

            modelBuilder.Entity("ApplicationPermissionApplicationRole", b =>
                {
                    b.HasOne("Comabit.DL.ApplicationPermission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsApplicationPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comabit.DL.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuyerProjectInquiryPortfolioCategory", b =>
                {
                    b.HasOne("Comabit.DL.Data.Inquiry.BuyerProjectInquiry", null)
                        .WithMany()
                        .HasForeignKey("BuyerProjectInquireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comabit.DL.Data.Portfolio.PortfolioCategory", null)
                        .WithMany()
                        .HasForeignKey("PortfolioCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuyerProjectInquiryPortfolioSubCategory", b =>
                {
                    b.HasOne("Comabit.DL.Data.Inquiry.BuyerProjectInquiry", null)
                        .WithMany()
                        .HasForeignKey("BuyerProjectInquireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comabit.DL.Data.Portfolio.PortfolioSubCategory", null)
                        .WithMany()
                        .HasForeignKey("PortfolioSubCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Comabit.DL.ApplicationUser", b =>
                {
                    b.HasOne("Comabit.DL.Data.Company.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Comabit.DL.Data.File.FileData", b =>
                {
                    b.HasOne("Comabit.DL.Data.File.File", "File")
                        .WithOne("FileData")
                        .HasForeignKey("Comabit.DL.Data.File.FileData", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Comabit.DL.Data.Geo.City", b =>
                {
                    b.HasOne("Comabit.DL.Data.Geo.Community", "Community")
                        .WithMany("Cities")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");
                });

            modelBuilder.Entity("Comabit.DL.Data.Geo.Community", b =>
                {
                    b.HasOne("Comabit.DL.Data.Geo.Province", "Province")
                        .WithMany("Communities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Comabit.DL.Data.Geo.Province", b =>
                {
                    b.HasOne("Comabit.DL.Data.Geo.State", "State")
                        .WithMany("Provinces")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Comabit.DL.Data.Inquiry.BuyerProject", b =>
                {
                    b.HasOne("Comabit.DL.Data.Company.BuyerCompany", "BuyerCompany")
                        .WithMany("BuyerProjects")
                        .HasForeignKey("BuyerCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuyerCompany");
                });

            modelBuilder.Entity("Comabit.DL.Data.Inquiry.BuyerProjectInquiry", b =>
                {
                    b.HasOne("Comabit.DL.Data.Inquiry.BuyerProject", "BuyerProject")
                        .WithMany("BuyerProjectInquiries")
                        .HasForeignKey("BuyerProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuyerProject");
                });

            modelBuilder.Entity("Comabit.DL.Data.Match.Match", b =>
                {
                    b.HasOne("Comabit.DL.Data.Inquiry.BuyerProjectInquiry", "Inquiry")
                        .WithMany("Matches")
                        .HasForeignKey("InquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comabit.DL.Data.Company.SellerCompany", "SellerCompany")
                        .WithMany("Matches")
                        .HasForeignKey("SellerCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inquiry");

                    b.Navigation("SellerCompany");
                });

            modelBuilder.Entity("Comabit.DL.Data.Match.Message", b =>
                {
                    b.HasOne("Comabit.DL.Data.Match.Match", "Match")
                        .WithMany("Messages")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Comabit.DL.Data.Match.Offer", b =>
                {
                    b.HasOne("Comabit.DL.Data.File.OfferFile", "File")
                        .WithOne("Offer")
                        .HasForeignKey("Comabit.DL.Data.Match.Offer", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comabit.DL.Data.Match.Match", "Match")
                        .WithMany("Offers")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Comabit.DL.Data.Portfolio.AdditionalPortfolioCategoryTags", b =>
                {
                    b.HasOne("Comabit.DL.Data.Portfolio.PortfolioCategory", "PortfolioCategory")
                        .WithMany("AdditionalPortfolioCategoryTags")
                        .HasForeignKey("PortfolioCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comabit.DL.Data.Company.SellerCompany", "SellerCompany")
                        .WithMany("AdditionalPortfolioCategoryTags")
                        .HasForeignKey("SellerCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PortfolioCategory");

                    b.Navigation("SellerCompany");
                });

            modelBuilder.Entity("Comabit.DL.Data.Portfolio.PortfolioCategory", b =>
                {
                    b.HasOne("Comabit.DL.Data.Portfolio.PortfolioArea", "PortfolioArea")
                        .WithMany("PortfolioCategories")
                        .HasForeignKey("PortfolioAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PortfolioArea");
                });

            modelBuilder.Entity("Comabit.DL.Data.Portfolio.PortfolioSubCategory", b =>
                {
                    b.HasOne("Comabit.DL.Data.Portfolio.PortfolioCategory", "PortfolioCategory")
                        .WithMany("PortfolioSubCategories")
                        .HasForeignKey("PortfolioCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PortfolioCategory");
                });

            modelBuilder.Entity("CommunitySellerCompany", b =>
                {
                    b.HasOne("Comabit.DL.Data.Geo.Community", null)
                        .WithMany()
                        .HasForeignKey("CommunitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comabit.DL.Data.Company.SellerCompany", null)
                        .WithMany()
                        .HasForeignKey("SellerCompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Comabit.DL.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Comabit.DL.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Comabit.DL.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Comabit.DL.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comabit.DL.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Comabit.DL.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioCategorySellerCompany", b =>
                {
                    b.HasOne("Comabit.DL.Data.Portfolio.PortfolioCategory", null)
                        .WithMany()
                        .HasForeignKey("PortfolioCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comabit.DL.Data.Company.SellerCompany", null)
                        .WithMany()
                        .HasForeignKey("SellerCompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioSubCategorySellerCompany", b =>
                {
                    b.HasOne("Comabit.DL.Data.Portfolio.PortfolioSubCategory", null)
                        .WithMany()
                        .HasForeignKey("PortfolioSubCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comabit.DL.Data.Company.SellerCompany", null)
                        .WithMany()
                        .HasForeignKey("SellerCompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Comabit.DL.Data.File.InquiryFile", b =>
                {
                    b.HasOne("Comabit.DL.Data.Inquiry.BuyerProjectInquiry", "BuyerProjectInquiry")
                        .WithMany("InquiryFiles")
                        .HasForeignKey("BuyerProjectInquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuyerProjectInquiry");
                });

            modelBuilder.Entity("Comabit.DL.Data.Company.Company", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Comabit.DL.Data.File.File", b =>
                {
                    b.Navigation("FileData");
                });

            modelBuilder.Entity("Comabit.DL.Data.Geo.Community", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Comabit.DL.Data.Geo.Province", b =>
                {
                    b.Navigation("Communities");
                });

            modelBuilder.Entity("Comabit.DL.Data.Geo.State", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("Comabit.DL.Data.Inquiry.BuyerProject", b =>
                {
                    b.Navigation("BuyerProjectInquiries");
                });

            modelBuilder.Entity("Comabit.DL.Data.Inquiry.BuyerProjectInquiry", b =>
                {
                    b.Navigation("InquiryFiles");

                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Comabit.DL.Data.Match.Match", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Comabit.DL.Data.Portfolio.PortfolioArea", b =>
                {
                    b.Navigation("PortfolioCategories");
                });

            modelBuilder.Entity("Comabit.DL.Data.Portfolio.PortfolioCategory", b =>
                {
                    b.Navigation("AdditionalPortfolioCategoryTags");

                    b.Navigation("PortfolioSubCategories");
                });

            modelBuilder.Entity("Comabit.DL.Data.Company.BuyerCompany", b =>
                {
                    b.Navigation("BuyerProjects");
                });

            modelBuilder.Entity("Comabit.DL.Data.Company.SellerCompany", b =>
                {
                    b.Navigation("AdditionalPortfolioCategoryTags");

                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Comabit.DL.Data.File.OfferFile", b =>
                {
                    b.Navigation("Offer");
                });
#pragma warning restore 612, 618
        }
    }
}
